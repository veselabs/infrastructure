name: CD

on:
  push:
    branches: [master]

permissions:
  actions: read
  contents: read
  id-token: write

env:
  GITHUB_APP_ID: ${{ secrets.GH_APP_ID }}
  GITHUB_APP_INSTALLATION_ID: ${{ secrets.GH_APP_INSTALLATION_ID }}
  GITHUB_APP_PEM_FILE: ${{ secrets.GH_APP_PEM_FILE }}

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  ci:
    name: CI
    uses: ./.github/workflows/ci.yaml
    secrets: inherit

  check_if_applyable:
    name: Check if applyable
    strategy:
      matrix:
        environment: [organization, development]
    runs-on: ubuntu-latest
    needs: [ci]
    outputs:
      organization: ${{ steps.check_if_applyable.outputs.organization }}
      development: ${{ steps.check_if_applyable.outputs.development }}

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install Nix
        uses: nixbuild/nix-quick-install-action@v33

      - name: Cache Nix Store
        uses: nix-community/cache-nix-action@v6
        with:
          primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
          restore-prefixes-first-match: nix-${{ runner.os }}-
          purge: true
          purge-prefixes: nix-${{ runner.os }}-
          purge-primary-key: never

      - name: Initialize Terraform
        working-directory: ./environments/${{ matrix.environment }}
        run: nix develop .#ci -c terraform init

      - name: Download Plan Artifact
        uses: actions/download-artifact@v5
        with:
          name: plan-${{ matrix.environment }}-${{ github.sha }}
          path: ./environments/${{ matrix.environment }}

      - name: Check if applyable
        id: check_if_applyable
        working-directory: ./environments/${{ matrix.environment }}
        run: |
          set -euo pipefail
          applyable=$(nix develop .#ci -c terraform show -json ./plan | jq '.applyable')
          echo "${{ matrix.environment }}=${applyable}" >> "${GITHUB_OUTPUTS}"

  apply:
    name: Apply
    strategy:
      matrix:
        environment: [organization, development]
    runs-on: ubuntu-latest
    environment: ${{ matrix.environment }}
    needs: [check_if_applyable]
    if: needs.check_if_applyable.outputs[matrix.environment]

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: arn:aws:iam::519848832156:role/gha-infrastructure
          aws-region: eu-north-1

      - name: Install Nix
        uses: nixbuild/nix-quick-install-action@v33

      - name: Cache Nix Store
        uses: nix-community/cache-nix-action@v6
        with:
          primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
          restore-prefixes-first-match: nix-${{ runner.os }}-
          purge: true
          purge-prefixes: nix-${{ runner.os }}-
          purge-primary-key: never

      - name: Initialize Terraform
        working-directory: ./environments/${{ matrix.environment }}
        run: nix develop .#ci -c terraform init

      - name: Download Plan Artifact
        uses: actions/download-artifact@v5
        with:
          name: plan-${{ matrix.environment }}-${{ github.sha }}
          path: ./environments/${{ matrix.environment }}

      - name: Apply Plan
        working-directory: ./environments/${{ matrix.environment }}
        run: nix develop .#ci -c terraform apply -auto-approve ./plan
