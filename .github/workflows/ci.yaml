name: CI

on:
  pull_request:
    branches: [master]
  merge_group:
    types: [checks_requested]
  workflow_call:

permissions:
  actions: read
  contents: read
  id-token: write

env:
  GITHUB_APP_ID: ${{ secrets.GH_APP_ID }}
  GITHUB_APP_INSTALLATION_ID: ${{ secrets.GH_APP_INSTALLATION_ID }}
  GITHUB_APP_PEM_FILE: ${{ secrets.GH_APP_PEM_FILE }}

jobs:
  flake:
    name: Check Flake
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install Nix
        uses: nixbuild/nix-quick-install-action@v33

      - name: Cache Nix Store
        uses: nix-community/cache-nix-action@v6
        with:
          primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
          restore-prefixes-first-match: nix-${{ runner.os }}-
          purge: true
          purge-prefixes: nix-${{ runner.os }}-
          purge-primary-key: never

      - name: Check
        run: nix flake check --impure --all-systems

      - name: Format
        run: nix fmt -- --ci

  validate:
    name: Validate
    strategy:
      matrix:
        environment: [organization, development]
    runs-on: ubuntu-latest
    needs: [flake]

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: arn:aws:iam::519848832156:role/gha-infrastructure
          aws-region: eu-north-1

      - name: Install Nix
        uses: nixbuild/nix-quick-install-action@v33

      - name: Cache Nix Store
        uses: nix-community/cache-nix-action@v6
        with:
          primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
          restore-prefixes-first-match: nix-${{ runner.os }}-
          purge: true
          purge-prefixes: nix-${{ runner.os }}-
          purge-primary-key: never

      - name: Initialize Terraform
        working-directory: ./environments/${{ matrix.environment }}
        run: nix develop .#ci -c terraform init -backend=false

      - name: Validate Terraform
        working-directory: ./environments/${{ matrix.environment }}
        run: nix develop .#ci -c terraform validate

  plan:
    name: Plan
    strategy:
      matrix:
        environment: [organization, development]
    runs-on: ubuntu-latest
    needs: [validate]

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: arn:aws:iam::519848832156:role/gha-infrastructure
          aws-region: eu-north-1

      - name: Install Nix
        uses: nixbuild/nix-quick-install-action@v33

      - name: Cache Nix Store
        uses: nix-community/cache-nix-action@v6
        with:
          primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
          restore-prefixes-first-match: nix-${{ runner.os }}-
          purge: true
          purge-prefixes: nix-${{ runner.os }}-
          purge-primary-key: never

      - name: Initialize Terraform
        working-directory: ./environments/${{ matrix.environment }}
        run: nix develop .#ci -c terraform init

      - name: Create Plan
        working-directory: ./environments/${{ matrix.environment }}
        run: nix develop .#ci -c terraform plan -out=./plan

      - name: Upload Plan Artifact
        uses: actions/upload-artifact@v4
        with:
          name: plan-${{ matrix.environment }}-${{ github.sha }}
          path: ./environments/${{ matrix.environment }}/plan

  succeed:
    name: Succeed
    runs-on: ubuntu-latest
    needs:
      - validate
      - plan
    steps:
      - run: "true"
